apply plugin:'maven'
apply plugin:'signing'
apply plugin:'maven-publish'
apply plugin:'com.jfrog.bintray'
apply plugin:'com.github.dcendents.android-maven'

def versionLocation = "build/last_deployed_version.txt"
version = project.hasProperty('production') ? version_to_deploy :
    "EXPERIMENTAL-${version_to_deploy}-${dateNow}"

task javadoc(type:Javadoc) {
    failOnError = false
    options.encoding = 'UTF-8'
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/internal/**'
}

task androidJavadocsJar(type:Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task androidSourcesJar(type:Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

task publishAar {
    dependsOn bintrayUpload

    doLast {
        println "Deployed ${project.name} version: ${version}"
        file(versionLocation).text = version
    }
}

task publishLocalInit {
    doLast {
        version = "LOCAL-${version_to_deploy}-${dateNow}"
    }
}

task publishLocal {
    publishToMavenLocal.mustRunAfter(publishLocalInit)
    dependsOn publishToMavenLocal, publishLocalInit

    doLast {
        println "Deployed ${project.name} version: ${version}"
        file(versionLocation).text = version
    }
}

task printLastVersion {
    doLast {
        println file(versionLocation).text
    }
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

def localProperties = new Properties()

if (project.rootProject.file('local.properties').exists()) {
    localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
}

install {
    group = groupName
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId group
                artifactId artifactLib

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id 'agustinmantuano'
                        name 'Agustin Mantuano'
                        email 'agustin.mantuano@mercadolibre.com'
                    }
                    developer {
                        id 'george29'
                        name 'Jorge Gonzalez'
                        email 'jorge.gonzalez@mercadolibre.com'
                    }
                    developer {
                        id 'matiasromar'
                        name 'Matias Romar'
                        email 'matias.romar@mercadolibre.com'
                    }
                    developer {
                        id 'cgaggino'
                        name 'Cristian Gaggino'
                        email 'cristian.gaggino@mercadolibre.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

bintray {
    user = "$System.env.BINTRAY_USER"
    key = "$System.env.BINTRAY_API_KEY"

    override = true

    configurations = ['archives']
    pkg {
        repo = project.hasProperty('production') ? 'android' : 'android-experimental'
        name = libraryName
        desc = libraryDescription
        userOrg = 'mercadopago'
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
        publicDownloadNumbers = true
        version {
            name = this.version
            desc = libraryDescription
            vcsTag = this.version
            released = project.hasProperty('production') ? new Date() : null
        }
    }
}

// Local m2 repo publication
publishing {
    publications {
        aar(MavenPublication) {
            groupId group
            artifactId artifactLib
            artifact("$buildDir/outputs/aar/${artifactLib}-release.aar") {
                builtBy assemble
            }

            // Necessary to include dependencies
            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.getByName("releaseCompileClasspath").getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.moduleGroup.replace("px-", ""))
                    dependency.appendNode('artifactId', it.moduleName.replace("px-", ""))
                    dependency.appendNode('version', it.moduleVersion)
                }
            }
        }
    }
}